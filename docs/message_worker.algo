
#Â received publish message
Client::publish (Msg)
	Subscribers = Registar::get_subscribers(Msg.topic)

	# v1 - create gen_server
	Mw = MsgWorker::new

	# alternative : use gproc to register MsgWorker msgid globally
	.MsgWorkers [ Msg.id ] = Mw

	Mw::publish(Self, Msg, Subscribers)

	# v2 - use pool
	Mw  = Pool::get(type=msgworker)
	Mw::publish(Self, Msg, Subscribers)

	# v3 - send to queue
	MsgQueue::write(Msg, Subscribers)

# MsgWorker
MsgWorker::publish (Client, Msg, Subscribers)
	DB::Store(Msg)
	.MsgID = Msg.id
	.Publisher = Client

	# QoS 2 :: PUBREC
	.Publisher::send(#PUBREC)

	foreach S (Subscribers);
		S::send(#PUBLISH)
		# msg delivery retry
		Self::timeout(S, $timeout, #PUBLISH)

	

# receive PUBACK/PUBCOMP from subscriber clients
Client2::ack (Msg)
	# we need to find MsgWorker managing this MsgID
	
	#
	Mw::ack (Client, Msg)

MsgWorker::ack (Client, Msg)
	# remove msg delivery retry timeout
	Self::reset(Client)

	#
	delete ( .Subscribers, Client)

	# all messages delivered
	if empty ( .Subscribers )
		DB::delete ( .MsgID ) 
		# send final response to publisher
		.Publisher::send ( #PUBACK|#PUBCOMP )

		# v1
		Self::destroy ()

		# v2
		Pool::free(Self)
